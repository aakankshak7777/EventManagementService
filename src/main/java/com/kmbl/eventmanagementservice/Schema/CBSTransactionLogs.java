/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kmbl.eventmanagementservice.Schema;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class CBSTransactionLogs extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3122191508244741401L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CBSTransactionLogs\",\"namespace\":\"com.kmbl.eventmanagementservice.Schema\",\"fields\":[{\"name\":\"table\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"op_type\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"op_ts\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"current_ts\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"pos\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"source_scn\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"before\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CBSTranCol\",\"fields\":[{\"name\":\"ID\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"AMOUNT\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"CBSRC\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"CREDITACCOUNT\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"CUSTOMERID\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"DEBITACCOUNT\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"MSGID\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"REVERSAL\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"REVERSALSTATUS\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"RRN\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"STAN\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"TXN_DATE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"TXNID\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"TYPE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"UPIRC\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"ORGTXNID\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"REMARKS\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"CUSTOMERACCOUNT\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"NAME\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"PAYEEVPA\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"PAYERVPA\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"SEQNO\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"COMMISSIONAMOUNT\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"CUSTOMERREFID\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"TRANTYPE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"CREDITBANKNAME\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"DEBITBANKNAME\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"OTHERSACCOUNT\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"CHANNEL\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"APPID\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"PREAPPROVED\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"BENEFICIARYNAME\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"OTHERMOBILENO\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"REMITTERNAME\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"APPROVALNUM\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"MCCCODE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"SERVERIP\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"CBSRESP_DATE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"INITMODE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"PURPOSECODE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"CREDITACCOUNTTYPE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"CREDITIFSC\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"DEBITACCOUNTTYPE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"DEBITIFSC\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"ORDERID\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"PAYEECODE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"PAYERCODE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"SUBTYPE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"REMITTORMOBILENUMBER\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"PAYEEIMEI\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"PAYERIMEI\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"GMTDATE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"PAYEEACCOUNTTYPE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"PAYERACCOUNTTYPE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"PAYERCONSENTNAME\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"PAYERCONSENTTYPE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"PAYERCONSENTVALUE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"ADJCODE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"ADJFLAG\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"CREATE_DATE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"CREDITACCTNARRATION_103\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"DE46\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"DEBITACCTNARRATION_102\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"GST\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"LOANNUMBER\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"LOCALTIME\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"NARRATION_125\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"P2PTXNCHARGES\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"SCHEMECODE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"TXNAMOUNT\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"BATCH_ID\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"BASEAMOUNT\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"BASECURR\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"CONCODE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"FX\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"MKUP\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"ADDITIONAL4\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"D12\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"ADDITIONAL1\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"ADDITIONAL2\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"ADDITIONAL3\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"ADDITIONAL5\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"CBS_ROUTING\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"after\",\"type\":[\"null\",\"CBSTranCol\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CBSTransactionLogs> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CBSTransactionLogs> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CBSTransactionLogs> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CBSTransactionLogs> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CBSTransactionLogs> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CBSTransactionLogs to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CBSTransactionLogs from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CBSTransactionLogs instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CBSTransactionLogs fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private CharSequence table;
  private CharSequence op_type;
  private CharSequence op_ts;
  private CharSequence current_ts;
  private CharSequence pos;
  private CharSequence source_scn;
  private CBSTranCol before;
  private CBSTranCol after;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CBSTransactionLogs() {}

  /**
   * All-args constructor.
   * @param table The new value for table
   * @param op_type The new value for op_type
   * @param op_ts The new value for op_ts
   * @param current_ts The new value for current_ts
   * @param pos The new value for pos
   * @param source_scn The new value for source_scn
   * @param before The new value for before
   * @param after The new value for after
   */
  public CBSTransactionLogs(CharSequence table, CharSequence op_type, CharSequence op_ts, CharSequence current_ts, CharSequence pos, CharSequence source_scn, CBSTranCol before, CBSTranCol after) {
    this.table = table;
    this.op_type = op_type;
    this.op_ts = op_ts;
    this.current_ts = current_ts;
    this.pos = pos;
    this.source_scn = source_scn;
    this.before = before;
    this.after = after;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return table;
    case 1: return op_type;
    case 2: return op_ts;
    case 3: return current_ts;
    case 4: return pos;
    case 5: return source_scn;
    case 6: return before;
    case 7: return after;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: table = (CharSequence)value$; break;
    case 1: op_type = (CharSequence)value$; break;
    case 2: op_ts = (CharSequence)value$; break;
    case 3: current_ts = (CharSequence)value$; break;
    case 4: pos = (CharSequence)value$; break;
    case 5: source_scn = (CharSequence)value$; break;
    case 6: before = (CBSTranCol)value$; break;
    case 7: after = (CBSTranCol)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'table' field.
   * @return The value of the 'table' field.
   */
  public CharSequence getTable() {
    return table;
  }


  /**
   * Sets the value of the 'table' field.
   * @param value the value to set.
   */
  public void setTable(CharSequence value) {
    this.table = value;
  }

  /**
   * Gets the value of the 'op_type' field.
   * @return The value of the 'op_type' field.
   */
  public CharSequence getOpType() {
    return op_type;
  }


  /**
   * Sets the value of the 'op_type' field.
   * @param value the value to set.
   */
  public void setOpType(CharSequence value) {
    this.op_type = value;
  }

  /**
   * Gets the value of the 'op_ts' field.
   * @return The value of the 'op_ts' field.
   */
  public CharSequence getOpTs() {
    return op_ts;
  }


  /**
   * Sets the value of the 'op_ts' field.
   * @param value the value to set.
   */
  public void setOpTs(CharSequence value) {
    this.op_ts = value;
  }

  /**
   * Gets the value of the 'current_ts' field.
   * @return The value of the 'current_ts' field.
   */
  public CharSequence getCurrentTs() {
    return current_ts;
  }


  /**
   * Sets the value of the 'current_ts' field.
   * @param value the value to set.
   */
  public void setCurrentTs(CharSequence value) {
    this.current_ts = value;
  }

  /**
   * Gets the value of the 'pos' field.
   * @return The value of the 'pos' field.
   */
  public CharSequence getPos() {
    return pos;
  }


  /**
   * Sets the value of the 'pos' field.
   * @param value the value to set.
   */
  public void setPos(CharSequence value) {
    this.pos = value;
  }

  /**
   * Gets the value of the 'source_scn' field.
   * @return The value of the 'source_scn' field.
   */
  public CharSequence getSourceScn() {
    return source_scn;
  }


  /**
   * Sets the value of the 'source_scn' field.
   * @param value the value to set.
   */
  public void setSourceScn(CharSequence value) {
    this.source_scn = value;
  }

  /**
   * Gets the value of the 'before' field.
   * @return The value of the 'before' field.
   */
  public CBSTranCol getBefore() {
    return before;
  }


  /**
   * Sets the value of the 'before' field.
   * @param value the value to set.
   */
  public void setBefore(CBSTranCol value) {
    this.before = value;
  }

  /**
   * Gets the value of the 'after' field.
   * @return The value of the 'after' field.
   */
  public CBSTranCol getAfter() {
    return after;
  }


  /**
   * Sets the value of the 'after' field.
   * @param value the value to set.
   */
  public void setAfter(CBSTranCol value) {
    this.after = value;
  }

  /**
   * Creates a new CBSTransactionLogs RecordBuilder.
   * @return A new CBSTransactionLogs RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new CBSTransactionLogs RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CBSTransactionLogs RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new CBSTransactionLogs RecordBuilder by copying an existing CBSTransactionLogs instance.
   * @param other The existing instance to copy.
   * @return A new CBSTransactionLogs RecordBuilder
   */
  public static Builder newBuilder(CBSTransactionLogs other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for CBSTransactionLogs instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CBSTransactionLogs>
    implements org.apache.avro.data.RecordBuilder<CBSTransactionLogs> {

    private CharSequence table;
    private CharSequence op_type;
    private CharSequence op_ts;
    private CharSequence current_ts;
    private CharSequence pos;
    private CharSequence source_scn;
    private CBSTranCol before;
    private CBSTranCol.Builder beforeBuilder;
    private CBSTranCol after;
    private CBSTranCol.Builder afterBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.table)) {
        this.table = data().deepCopy(fields()[0].schema(), other.table);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.op_type)) {
        this.op_type = data().deepCopy(fields()[1].schema(), other.op_type);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.op_ts)) {
        this.op_ts = data().deepCopy(fields()[2].schema(), other.op_ts);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.current_ts)) {
        this.current_ts = data().deepCopy(fields()[3].schema(), other.current_ts);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.pos)) {
        this.pos = data().deepCopy(fields()[4].schema(), other.pos);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.source_scn)) {
        this.source_scn = data().deepCopy(fields()[5].schema(), other.source_scn);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.before)) {
        this.before = data().deepCopy(fields()[6].schema(), other.before);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (other.hasBeforeBuilder()) {
        this.beforeBuilder = CBSTranCol.newBuilder(other.getBeforeBuilder());
      }
      if (isValidValue(fields()[7], other.after)) {
        this.after = data().deepCopy(fields()[7].schema(), other.after);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (other.hasAfterBuilder()) {
        this.afterBuilder = CBSTranCol.newBuilder(other.getAfterBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing CBSTransactionLogs instance
     * @param other The existing instance to copy.
     */
    private Builder(CBSTransactionLogs other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.table)) {
        this.table = data().deepCopy(fields()[0].schema(), other.table);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.op_type)) {
        this.op_type = data().deepCopy(fields()[1].schema(), other.op_type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.op_ts)) {
        this.op_ts = data().deepCopy(fields()[2].schema(), other.op_ts);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.current_ts)) {
        this.current_ts = data().deepCopy(fields()[3].schema(), other.current_ts);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.pos)) {
        this.pos = data().deepCopy(fields()[4].schema(), other.pos);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.source_scn)) {
        this.source_scn = data().deepCopy(fields()[5].schema(), other.source_scn);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.before)) {
        this.before = data().deepCopy(fields()[6].schema(), other.before);
        fieldSetFlags()[6] = true;
      }
      this.beforeBuilder = null;
      if (isValidValue(fields()[7], other.after)) {
        this.after = data().deepCopy(fields()[7].schema(), other.after);
        fieldSetFlags()[7] = true;
      }
      this.afterBuilder = null;
    }

    /**
      * Gets the value of the 'table' field.
      * @return The value.
      */
    public CharSequence getTable() {
      return table;
    }


    /**
      * Sets the value of the 'table' field.
      * @param value The value of 'table'.
      * @return This builder.
      */
    public Builder setTable(CharSequence value) {
      validate(fields()[0], value);
      this.table = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'table' field has been set.
      * @return True if the 'table' field has been set, false otherwise.
      */
    public boolean hasTable() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'table' field.
      * @return This builder.
      */
    public Builder clearTable() {
      table = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'op_type' field.
      * @return The value.
      */
    public CharSequence getOpType() {
      return op_type;
    }


    /**
      * Sets the value of the 'op_type' field.
      * @param value The value of 'op_type'.
      * @return This builder.
      */
    public Builder setOpType(CharSequence value) {
      validate(fields()[1], value);
      this.op_type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'op_type' field has been set.
      * @return True if the 'op_type' field has been set, false otherwise.
      */
    public boolean hasOpType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'op_type' field.
      * @return This builder.
      */
    public Builder clearOpType() {
      op_type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'op_ts' field.
      * @return The value.
      */
    public CharSequence getOpTs() {
      return op_ts;
    }


    /**
      * Sets the value of the 'op_ts' field.
      * @param value The value of 'op_ts'.
      * @return This builder.
      */
    public Builder setOpTs(CharSequence value) {
      validate(fields()[2], value);
      this.op_ts = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'op_ts' field has been set.
      * @return True if the 'op_ts' field has been set, false otherwise.
      */
    public boolean hasOpTs() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'op_ts' field.
      * @return This builder.
      */
    public Builder clearOpTs() {
      op_ts = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'current_ts' field.
      * @return The value.
      */
    public CharSequence getCurrentTs() {
      return current_ts;
    }


    /**
      * Sets the value of the 'current_ts' field.
      * @param value The value of 'current_ts'.
      * @return This builder.
      */
    public Builder setCurrentTs(CharSequence value) {
      validate(fields()[3], value);
      this.current_ts = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'current_ts' field has been set.
      * @return True if the 'current_ts' field has been set, false otherwise.
      */
    public boolean hasCurrentTs() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'current_ts' field.
      * @return This builder.
      */
    public Builder clearCurrentTs() {
      current_ts = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'pos' field.
      * @return The value.
      */
    public CharSequence getPos() {
      return pos;
    }


    /**
      * Sets the value of the 'pos' field.
      * @param value The value of 'pos'.
      * @return This builder.
      */
    public Builder setPos(CharSequence value) {
      validate(fields()[4], value);
      this.pos = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'pos' field has been set.
      * @return True if the 'pos' field has been set, false otherwise.
      */
    public boolean hasPos() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'pos' field.
      * @return This builder.
      */
    public Builder clearPos() {
      pos = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'source_scn' field.
      * @return The value.
      */
    public CharSequence getSourceScn() {
      return source_scn;
    }


    /**
      * Sets the value of the 'source_scn' field.
      * @param value The value of 'source_scn'.
      * @return This builder.
      */
    public Builder setSourceScn(CharSequence value) {
      validate(fields()[5], value);
      this.source_scn = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'source_scn' field has been set.
      * @return True if the 'source_scn' field has been set, false otherwise.
      */
    public boolean hasSourceScn() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'source_scn' field.
      * @return This builder.
      */
    public Builder clearSourceScn() {
      source_scn = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'before' field.
      * @return The value.
      */
    public CBSTranCol getBefore() {
      return before;
    }


    /**
      * Sets the value of the 'before' field.
      * @param value The value of 'before'.
      * @return This builder.
      */
    public Builder setBefore(CBSTranCol value) {
      validate(fields()[6], value);
      this.beforeBuilder = null;
      this.before = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'before' field has been set.
      * @return True if the 'before' field has been set, false otherwise.
      */
    public boolean hasBefore() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'before' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public CBSTranCol.Builder getBeforeBuilder() {
      if (beforeBuilder == null) {
        if (hasBefore()) {
          setBeforeBuilder(CBSTranCol.newBuilder(before));
        } else {
          setBeforeBuilder(CBSTranCol.newBuilder());
        }
      }
      return beforeBuilder;
    }

    /**
     * Sets the Builder instance for the 'before' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public Builder setBeforeBuilder(CBSTranCol.Builder value) {
      clearBefore();
      beforeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'before' field has an active Builder instance
     * @return True if the 'before' field has an active Builder instance
     */
    public boolean hasBeforeBuilder() {
      return beforeBuilder != null;
    }

    /**
      * Clears the value of the 'before' field.
      * @return This builder.
      */
    public Builder clearBefore() {
      before = null;
      beforeBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'after' field.
      * @return The value.
      */
    public CBSTranCol getAfter() {
      return after;
    }


    /**
      * Sets the value of the 'after' field.
      * @param value The value of 'after'.
      * @return This builder.
      */
    public Builder setAfter(CBSTranCol value) {
      validate(fields()[7], value);
      this.afterBuilder = null;
      this.after = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'after' field has been set.
      * @return True if the 'after' field has been set, false otherwise.
      */
    public boolean hasAfter() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'after' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public CBSTranCol.Builder getAfterBuilder() {
      if (afterBuilder == null) {
        if (hasAfter()) {
          setAfterBuilder(CBSTranCol.newBuilder(after));
        } else {
          setAfterBuilder(CBSTranCol.newBuilder());
        }
      }
      return afterBuilder;
    }

    /**
     * Sets the Builder instance for the 'after' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public Builder setAfterBuilder(CBSTranCol.Builder value) {
      clearAfter();
      afterBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'after' field has an active Builder instance
     * @return True if the 'after' field has an active Builder instance
     */
    public boolean hasAfterBuilder() {
      return afterBuilder != null;
    }

    /**
      * Clears the value of the 'after' field.
      * @return This builder.
      */
    public Builder clearAfter() {
      after = null;
      afterBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CBSTransactionLogs build() {
      try {
        CBSTransactionLogs record = new CBSTransactionLogs();
        record.table = fieldSetFlags()[0] ? this.table : (CharSequence) defaultValue(fields()[0]);
        record.op_type = fieldSetFlags()[1] ? this.op_type : (CharSequence) defaultValue(fields()[1]);
        record.op_ts = fieldSetFlags()[2] ? this.op_ts : (CharSequence) defaultValue(fields()[2]);
        record.current_ts = fieldSetFlags()[3] ? this.current_ts : (CharSequence) defaultValue(fields()[3]);
        record.pos = fieldSetFlags()[4] ? this.pos : (CharSequence) defaultValue(fields()[4]);
        record.source_scn = fieldSetFlags()[5] ? this.source_scn : (CharSequence) defaultValue(fields()[5]);
        if (beforeBuilder != null) {
          try {
            record.before = this.beforeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("before"));
            throw e;
          }
        } else {
          record.before = fieldSetFlags()[6] ? this.before : (CBSTranCol) defaultValue(fields()[6]);
        }
        if (afterBuilder != null) {
          try {
            record.after = this.afterBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("after"));
            throw e;
          }
        } else {
          record.after = fieldSetFlags()[7] ? this.after : (CBSTranCol) defaultValue(fields()[7]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CBSTransactionLogs>
    WRITER$ = (org.apache.avro.io.DatumWriter<CBSTransactionLogs>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CBSTransactionLogs>
    READER$ = (org.apache.avro.io.DatumReader<CBSTransactionLogs>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.table == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.table);
    }

    if (this.op_type == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.op_type);
    }

    if (this.op_ts == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.op_ts);
    }

    if (this.current_ts == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.current_ts);
    }

    if (this.pos == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.pos);
    }

    if (this.source_scn == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.source_scn);
    }

    if (this.before == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.before.customEncode(out);
    }

    if (this.after == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.after.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.table = null;
      } else {
        this.table = in.readString(this.table instanceof Utf8 ? (Utf8)this.table : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.op_type = null;
      } else {
        this.op_type = in.readString(this.op_type instanceof Utf8 ? (Utf8)this.op_type : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.op_ts = null;
      } else {
        this.op_ts = in.readString(this.op_ts instanceof Utf8 ? (Utf8)this.op_ts : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.current_ts = null;
      } else {
        this.current_ts = in.readString(this.current_ts instanceof Utf8 ? (Utf8)this.current_ts : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.pos = null;
      } else {
        this.pos = in.readString(this.pos instanceof Utf8 ? (Utf8)this.pos : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.source_scn = null;
      } else {
        this.source_scn = in.readString(this.source_scn instanceof Utf8 ? (Utf8)this.source_scn : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.before = null;
      } else {
        if (this.before == null) {
          this.before = new CBSTranCol();
        }
        this.before.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.after = null;
      } else {
        if (this.after == null) {
          this.after = new CBSTranCol();
        }
        this.after.customDecode(in);
      }

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.table = null;
          } else {
            this.table = in.readString(this.table instanceof Utf8 ? (Utf8)this.table : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.op_type = null;
          } else {
            this.op_type = in.readString(this.op_type instanceof Utf8 ? (Utf8)this.op_type : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.op_ts = null;
          } else {
            this.op_ts = in.readString(this.op_ts instanceof Utf8 ? (Utf8)this.op_ts : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.current_ts = null;
          } else {
            this.current_ts = in.readString(this.current_ts instanceof Utf8 ? (Utf8)this.current_ts : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.pos = null;
          } else {
            this.pos = in.readString(this.pos instanceof Utf8 ? (Utf8)this.pos : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.source_scn = null;
          } else {
            this.source_scn = in.readString(this.source_scn instanceof Utf8 ? (Utf8)this.source_scn : null);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.before = null;
          } else {
            if (this.before == null) {
              this.before = new CBSTranCol();
            }
            this.before.customDecode(in);
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.after = null;
          } else {
            if (this.after == null) {
              this.after = new CBSTranCol();
            }
            this.after.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}
